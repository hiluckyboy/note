全局配置

一、silent --- 默认为false
	用途：取消 Vue 所有的日志与警告
	用法：vue.config.silent = true

二、optionMergeStrategies
	用途：自定义合并策略的选项。
	用法：
	Vue.config.optionMergeStrategies._my_option = function (parent, child, vm) {
	  return child + 1    // 返回合并后的值
	}

	const Profile = Vue.extend({
	  _my_option: 1
	})

	// Profile.options._my_option = 2

三、devtools --- 默认为true (生产版为 false)
	用途：配置是否允许 vue-devtools 检查代码。
	用法：Vue.config.devtools = true

四、errorHandler
	用途：指定组件的渲染和观察期间未捕获错误的处理函数。这个处理函数被调用时，可获取错误信息和 Vue 实例。
	用法：
	Vue.config.errorHandler = function (err, vm, info) {
		// handle error
		// `info` 是 Vue 特定的错误信息，比如错误所在的生命周期钩子
		// 只在 2.2.0+ 可用
	}

五、warnHandler
	用途：为 Vue 的运行时警告赋予一个自定义处理函数。注意这只会在开发者环境下生效，在生产环境下它会被忽略。
	用法：
	Vue.config.warnHandler = function (msg, vm, trace) {
		// `trace` 是组件的继承关系追踪
	}

六、ignoredElements
	用途：须使Vue忽略在Vue之外的自定义元素(e.g.使用了Web Components APIs)。否则，它会假设你忘记注册全局组件或者拼错了组件名称，从而抛出一个关于Unknown custom element的警告。
	用法：
	Vue.config.ignoredElements = [
		'my-custom-web-component',
		'another-web-component',
		// 用一个 `RegExp` 忽略所有“ion-”开头的元素
		// 仅在 2.5+ 支持
		/^ion-/
	]

七、keyCodes
	用途：给 v-on 自定义键位别名。
	用法：
	Vue.config.keyCodes = {
		v: 86,
		f1: 112,
		// camelCase 不可用
		mediaPlayPause: 179,
		// 取而代之的是 kebab-case 且用双引号括起来
		"media-play-pause": 179,
		up: [38, 87]
	}

八、performance --- 默认为false
	用途：设置为 true 以在浏览器开发工具的性能/时间线面板中启用对组件初始化、编译、渲染和打补丁的性能追踪。只适用于开发模式和支持 performance.mark API 的浏览器上。
	用法：performance:true

九、productionTip --- 默认为true
	用途：设置为 false 以阻止 vue 在启动时生成生产提示。
	用法：productionTip:true



全局api

一、Vue.extend( options ) 
	参数： object
	用途：使用基础 Vue 构造器，创建一个“子类”。参数是一个包含组件选项的对象。data 选项是特例，需要注意 - 在 Vue.extend() 中它必须是函数
	用法：
	// 创建构造器
	var Profile = Vue.extend({
		template: '<p>{{firstName}} {{lastName}} aka {{alias}}</p>',
		data: function () {
			return {
			firstName: 'Walter',
			lastName: 'White',
			alias: 'Heisenberg'
			}
		}
	})
	// 创建 Profile 实例，并挂载到一个元素上。
	new Profile().$mount('#mount-point')

二、Vue.nextTick( [callback, context] )
	参数：{Function} [callback]    {Object} [context]
	用途：在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。
	用法：
	vm.msg = 'Hello'
	// DOM 还没有更新
	Vue.nextTick(function () {
		// DOM 更新了
	})
	//如果没有提供回调且在支持 Promise 的环境中，则返回一个 Promise。请注意 Vue 不自带 Promise 的 polyfill，所以如果你的目标浏览器不原生支持 Promise，你得自己提供 polyfill。
	Vue.nextTick()
	.then(function () {
		// DOM 更新了
	})

三、Vue.set( target, propertyName/index, value )
	参数：{Object | Array} target    {string | number} propertyName/index    {any} value
	用途：向响应式对象中添加一个属性，并确保这个新属性同样是响应式的，且触发视图更新。它必须用于向响应式对象上添加新属性，因为 Vue 无法探测普通的新增属性
	用法：Vue.set(this.myObject,index,val)

四、Vue.delete( target, propertyName/index )
	参数：{Object | Array} target		{string | number} propertyName/index
	用途：删除对象的属性。如果对象是响应式的，确保删除能触发更新视图。这个方法主要用于避开 Vue 不能检测到属性被删除的限制，但是你应该很少会使用它。
	用法：Vue.delete(this.myObject,index)

五、Vue.directive( id, [definition] )
	参数：{string} id		{Function | Object} [definition]
	用途：注册或获取全局指令。
	用法：v-mydir:bg=" 'bold' "
	Vue.directive('mydir', {
		bind(el,binding,vnode){
			el.style.color = "#f00"
			if (binding.value == "weight") {
				el.style.fontWeight="bold"
			}
			if (binding.arg == 'bg') {
				el.style['background-color']='#fff'
			}
		}
	})

六、Vue.filter( id, [definition] )
	参数：{string} id		{Function} [definition]
	用途：注册或获取全局过滤器。
	用法：





















